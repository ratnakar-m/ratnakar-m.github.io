{"version":3,"sources":["webpack:///./src/components/seo.js","webpack:///./src/templates/blog-post.js"],"names":["SEO","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","Template","post","data","markdownRemark","to","className","frontmatter","dangerouslySetInnerHTML","__html","html","pageQuery"],"mappings":"4FAAA,iDAYA,SAASA,EAAT,GAAkD,IAAD,IAAlCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAC9BC,EAASC,yBAAe,YAAxBD,KAcFE,EAAkBN,GAAeI,EAAKG,aAAaP,YACnDQ,EAAY,UAAGJ,EAAKG,oBAAR,aAAG,EAAmBJ,MAExC,OACE,kBAAC,IAAD,CACEM,eAAgB,CACdR,QAEFE,MAAOA,EACPO,cAAeF,EAAY,QAAWA,EAAiB,KACvDN,KAAM,CACJ,CACES,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAAST,GAEX,CACEU,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAAR,EAAKG,oBAAL,eAAmBO,SAAnB,IAEX,CACEH,KAAK,gBACLC,QAAST,GAEX,CACEQ,KAAK,sBACLC,QAASN,IAEXS,OAAOb,KAKfH,EAAIiB,aAAe,CACjBf,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD,O,kCCxFf,kKAQe,SAASkB,EAAT,GAEsB,IACTC,EADQ,EADCC,KAEzBC,eACR,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKjB,MAAM,UACX,kBAAC,OAAD,CAAMkB,GAAG,UAAT,iBACA,6BACA,yBAAKC,UAAU,uBACX,kBAAC,IAAD,CAAQnB,MAAK,oBAAsBe,EAAKK,YAAYpB,QACpD,yBAAKmB,UAAU,aACX,4BAAKJ,EAAKK,YAAYpB,OACtB,yBACImB,UAAU,oBACVE,wBAAyB,CAAEC,OAAQP,EAAKQ,WAQzD,IAAMC,EAAS","file":"component---src-templates-blog-post-js-1334668dd6f22d3a48f3.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.author || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport { Helmet } from \"react-helmet\"\nimport SEO from \"../components/seo\";\nimport Layout from \"../components/layout\";\nimport {Link} from \"gatsby\"\n\n// import '../css/blog-post.css'; // make it pretty!\n\nexport default function Template({\n                                     data // this prop will be injected by the GraphQL query we'll write in a bit\n                                 }) {\n    const { markdownRemark: post } = data // data.markdownRemark holds your post data\n    return (\n        <Layout>\n            <SEO title=\"Blogs\" />\n            <Link to=\"/blogs\">Back to blogs</Link>\n            <br/>\n            <div className=\"blog-post-container\">\n                <Helmet title={`Your Blog Name - ${post.frontmatter.title}`} />\n                <div className=\"blog-post\">\n                    <h1>{post.frontmatter.title}</h1>\n                    <div\n                        className=\"blog-post-content\"\n                        dangerouslySetInnerHTML={{ __html: post.html }}\n                    />\n                </div>\n            </div>\n        </Layout>\n    )\n}\n\nexport const pageQuery = graphql`\n  query BlogPostByPath($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        path\n        title\n      }\n    }\n  }\n`"],"sourceRoot":""}