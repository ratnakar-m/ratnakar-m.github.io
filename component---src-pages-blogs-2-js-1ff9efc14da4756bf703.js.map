{"version":3,"sources":["webpack:///./src/components/post_item.js","webpack:///./src/pages/blogs2.js","webpack:///./src/components/seo.js"],"names":["Post","title","date","author","description","path","className","to","Blogs","data","allMarkdownRemark","edges","map","post","node","frontmatter","excerpt","key","query","SEO","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","concat","defaultProps"],"mappings":"uPAeeA,G,oBAXF,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAeC,GAAlB,EAAUC,OAAV,EAAkBD,MAAME,EAAxB,EAAwBA,YAAaC,EAArC,EAAqCA,KAArC,OACT,yBAAKC,UAAU,QACX,wBAAIA,UAAU,cAAeL,GAC7B,uBAAGK,UAAU,oBAAqBF,GAClC,uBAAGE,UAAU,mBAAb,0BAC6BJ,GAE7B,kBAAC,OAAD,CAAMK,GAAKF,GAAX,gBCFO,SAASG,EAAT,GAA0B,IAATC,EAAQ,EAARA,KAC5B,OACI,kBAAC,IAAD,KACI,oCAEIA,EAAKC,kBAAkBC,MAAMC,KAAI,SAAAC,GAAS,IAAD,EACYA,EAAKC,KAAKC,YAApDd,EAD8B,EAC9BA,MAAeC,GADe,EACvBC,OADuB,EACfD,MAAmBG,GADJ,EACTD,YADS,EACIC,MACnCW,EAAUH,EAAKC,KAAKE,QAE1B,OACI,kBAAC,EAAD,CACIf,MAAOA,EACPC,KAAMA,EACNE,YAAaY,EACbC,IAAQf,EAAL,KAAcD,EACjBI,KAAMA,QAQ3B,IAAMa,EAAK,a,kCChClB,iDAYA,SAASC,EAAT,GAAkD,IAAD,IAAlCf,EAAkC,EAAlCA,YAAagB,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMpB,EAAS,EAATA,MAC9BqB,EAASC,yBAAe,YAAxBD,KAcFE,EAAkBpB,GAAekB,EAAKG,aAAarB,YACnDsB,EAAY,UAAGJ,EAAKG,oBAAR,aAAG,EAAmBxB,MAExC,OACE,kBAAC,IAAD,CACE0B,eAAgB,CACdP,QAEFnB,MAAOA,EACP2B,cAAeF,EAAY,QAAWA,EAAiB,KACvDL,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAAS7B,GAEX,CACE8B,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAAR,EAAKG,oBAAL,eAAmBtB,SAAnB,IAEX,CACE0B,KAAK,gBACLC,QAAS7B,GAEX,CACE4B,KAAK,sBACLC,QAASN,IAEXQ,OAAOX,KAKfF,EAAIc,aAAe,CACjBb,KAAK,KACLC,KAAM,GACNjB,YAAY,IAUCe,O","file":"component---src-pages-blogs-2-js-1ff9efc14da4756bf703.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\nimport \"../styles/post.css\";\n\nconst Post = ({ title, author, date, description, path }) => (\n    <div className=\"post\">\n        <h3 className=\"post-title\">{ title }</h3>\n        <p className=\"post-description\">{ description }</p>\n        <p className=\"post-written-by\">\n            Written by Ratnakar on { date }\n        </p>\n        <Link to={ path }>Read more</Link>\n    </div>\n);\n\nexport default Post;","import React from \"react\"\nimport { graphql} from \"gatsby\"\nimport {Link} from \"gatsby\"\nimport { css } from \"@emotion/core\"\nimport { rhythm } from \"../utils/typography\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\";\nimport Post from \"../components/post_item\";\n\nexport default function Blogs({ data }) {\n    return (\n        <Layout>\n            <h1>Blog</h1>\n            {\n                data.allMarkdownRemark.edges.map(post => {\n                    const {title, author, date, description, path} = post.node.frontmatter;\n                    const excerpt = post.node.excerpt;\n\n                    return (\n                        <Post\n                            title={title}\n                            date={date}\n                            description={excerpt}\n                            key={`${date}__${title}`}\n                            path={path}\n                        />\n                    )\n                })\n            }\n        </Layout>\n    );\n}\nexport const query = graphql`\n  query {\n    allMarkdownRemark {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n            path\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.author || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}