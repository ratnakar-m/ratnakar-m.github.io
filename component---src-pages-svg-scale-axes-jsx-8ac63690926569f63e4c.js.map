{"version":3,"sources":["webpack:///./src/pages/svg_scale_axes.jsx"],"names":["ScaleAndAxes","useState","data","setData","svgRef","useRef","useEffect","svg","d3","current","xScale","domain","length","range","yScale","xAxis","ticks","tickFormat","index","select","style","call","yAxis","myLine","x","value","y","curve","selectAll","join","attr","headerText","title","ref","className","onClick","map","filter"],"mappings":"4FAAA,8EAgEeA,UA1Df,WAAwB,IAAD,EAEKC,mBAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAnDC,EAFY,KAENC,EAFM,KAGbC,EAASC,mBAoCf,OAjCAC,qBAAU,WACN,IAAMC,EAAMC,IAAUJ,EAAOK,SAEvBC,EAASF,MACVG,OAAO,CAAC,EAAGT,EAAKU,OAAS,IACzBC,MAAM,CAAC,EAAG,MAETC,EAASN,MACVG,OAAO,CAAC,EAAG,MACXE,MAAM,CAAC,IAAK,IAEXE,EAAQP,IAAcE,GAAQM,MAAMd,EAAKU,QAAQK,YAAW,SAAAC,GAAK,OAAIA,EAAQ,KACnFX,EAAIY,OAAO,WAAWC,MAAM,YAAa,qBAAqBC,KAAKN,GAEnE,IAAMO,EAAQd,IAAaM,GAC3BP,EAAIY,OAAO,WAAWC,MAAM,YAAa,qBAAqBC,KAAKC,GAEnE,IAAMC,EAASf,MACVgB,GAAE,SAACC,EAAOP,GAAR,OAAkBR,EAAOQ,MAC3BQ,EAAEZ,GACFa,MAAMnB,KAEXD,EACKqB,UAAU,SACV1B,KAAK,CAACA,IACN2B,KAAK,QACLC,KAAK,QAAQ,QACbA,KAAK,KAAK,SAAAL,GAAK,OAAIF,EAAOE,MAC1BK,KAAK,OAAQ,QACbA,KAAK,SAAU,UAErB,CAAC5B,IAGA,kBAAC,IAAD,CAAQ6B,WAAW,sBACf,kBAAC,IAAD,CAAKC,MAAM,uBACX,6BACI,yBAAKC,IAAK7B,GACN,uBAAG8B,UAAU,WACb,uBAAGA,UAAU,YAEjB,6BACA,6BACA,6BACA,4BAAQC,QAAS,kBAAMhC,EAAQD,EAAKkC,KAAI,SAAAX,GAAK,OAAIA,EAAQ,QAAzD,eACA,4BAAQU,QAAS,kBAAMhC,EAAQD,EAAKmC,QAAO,SAAAZ,GAAK,OAAIA,EAAQ,SAA5D,mB","file":"component---src-pages-svg-scale-axes-jsx-8ac63690926569f63e4c.js","sourcesContent":["import React, {useState, useRef, useEffect} from 'react'\nimport * as d3 from 'd3'\nimport SEO from \"../components/seo\";\nimport Layout from \"../components/layout\";\nimport \"../styles/learn.css\"\n\nfunction ScaleAndAxes(){\n\n    const [data, setData] = useState([25, 30, 45, 60, 20, 65, 75]);\n    const svgRef = useRef();\n\n\n    useEffect(() => {\n        const svg = d3.select(svgRef.current);\n\n        const xScale = d3.scaleLinear()\n            .domain([0, data.length - 1])\n            .range([0, 300]);\n\n        const yScale = d3.scaleLinear()\n            .domain([0, 150])\n            .range([150, 0]);\n\n        const xAxis = d3.axisBottom(xScale).ticks(data.length).tickFormat(index => index + 1);\n        svg.select(\".x-axis\").style(\"transform\", \"translateY(150px)\").call(xAxis);\n\n        const yAxis = d3.axisRight(yScale);\n        svg.select(\".y-axis\").style(\"transform\", \"translateX(300px)\").call(yAxis);\n\n        const myLine = d3.line()\n            .x((value, index) => xScale(index))\n            .y(yScale)\n            .curve(d3.curveCardinal);\n\n        svg\n            .selectAll(\".line\")\n            .data([data])\n            .join(\"path\")\n            .attr(\"class\",\"line\" )\n            .attr(\"d\", value => myLine(value))\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"blue\");\n\n    }, [data])\n\n    return(\n        <Layout headerText=\"SVG Scale and Axes\">\n            <SEO title=\"SVG Scale and Axes\" />\n            <div>\n                <svg ref={svgRef}>\n                    <g className=\"x-axis\" />\n                    <g className=\"y-axis\" />\n                </svg>\n                <br/>\n                <br/>\n                <br/>\n                <button onClick={() => setData(data.map(value => value + 5))}>Update data</button>\n                <button onClick={() => setData(data.filter(value => value < 35))}>Filter data</button>\n            </div>\n        </Layout>\n    )\n\n}\n\nexport default ScaleAndAxes;"],"sourceRoot":""}