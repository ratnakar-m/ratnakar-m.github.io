{"version":3,"sources":["webpack:///./src/pages/blogs.js","webpack:///./src/components/seo.js"],"names":["Home","data","console","log","title","css","allMarkdownRemark","totalCount","edges","map","node","key","id","rhythm","frontmatter","date","excerpt","to","path","query","SEO","description","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps"],"mappings":"+pBAQe,SAASA,EAAT,GAAyB,IAATC,EAAQ,EAARA,KAE3B,OADAC,QAAQC,IAAIF,GAER,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKG,MAAM,UACX,6BACI,wBACIC,IAAKA,YAAF,MADP,YAQA,4BAAKJ,EAAKK,kBAAkBC,WAA5B,UACCN,EAAKK,kBAAkBE,MAAMC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OAC9B,yBAAKC,IAAKD,EAAKE,IACX,wBACIP,IAAKA,YAAF,IACEQ,YAAO,EAAI,KAGfH,EAAKI,YAAYV,MAAO,IACzB,0BACIC,IAAKA,YAAF,MADP,KAKTK,EAAKI,YAAYC,OAGZ,2BACI,8BAAOL,EAAKM,SAEZ,kBAAC,OAAD,CAAMC,GAAKP,EAAKI,YAAYI,MAA5B,IAAoC,6BAApC,oBAUrB,IAAMC,EAAK,a,kCCpDlB,iDAYA,SAASC,EAAT,GAAkD,IAAD,IAAlCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMnB,EAAS,EAATA,MAC9BoB,EAASC,yBAAe,YAAxBD,KAcFE,EAAkBL,GAAeG,EAAKG,aAAaN,YACnDO,EAAY,UAAGJ,EAAKG,oBAAR,aAAG,EAAmBvB,MAExC,OACE,kBAAC,IAAD,CACEyB,eAAgB,CACdP,QAEFlB,MAAOA,EACP0B,cAAeF,EAAY,QAAWA,EAAiB,KACvDL,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAAS5B,GAEX,CACE6B,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAAR,EAAKG,oBAAL,eAAmBO,SAAnB,IAEX,CACEH,KAAK,gBACLC,QAAS5B,GAEX,CACE2B,KAAK,sBACLC,QAASN,IAEXS,OAAOZ,KAKfH,EAAIgB,aAAe,CACjBd,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD","file":"component---src-pages-blogs-js-1e95167abddaa4496f0b.js","sourcesContent":["import React from \"react\"\nimport { graphql} from \"gatsby\"\nimport {Link} from \"gatsby\"\nimport { css } from \"@emotion/core\"\nimport { rhythm } from \"../utils/typography\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\";\n\nexport default function Home({ data }) {\n    console.log(data)\n    return (\n        <Layout>\n            <SEO title=\"Blogs\" />\n            <div>\n                <h1\n                    css={css`\n            display: inline-block;\n            border-bottom: 1px solid;\n          `}\n                >\n                    My Blogs\n                </h1>\n                <h4>{data.allMarkdownRemark.totalCount} Posts</h4>\n                {data.allMarkdownRemark.edges.map(({ node }) => (\n                    <div key={node.id}>\n                        <h3\n                            css={css`\n                margin-bottom: ${rhythm(1 / 4)};\n              `}\n                        >\n                            {node.frontmatter.title}{\" \"}\n                            <span\n                                css={css`\n                  color: #bbb;\n                `}\n                            >\n                â€” {node.frontmatter.date}\n              </span>\n                        </h3>\n                        <p>\n                            <span>{node.excerpt}</span>\n\n                            <Link to={ node.frontmatter.path }> <br/>Read more</Link>\n                        </p>\n\n                    </div>\n                ))}\n            </div>\n        </Layout>\n    )\n}\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n            path\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.author || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}